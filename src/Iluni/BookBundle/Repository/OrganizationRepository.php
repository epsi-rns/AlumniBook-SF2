<?php

namespace Iluni\BookBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Iluni\BookBundle\Repository\CommonConstraintRepository;

/**
 * OrganizationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author E.R. Nurwijayadi <epsi.rns@gmail.com>
 */
class OrganizationRepository extends CommonConstraintRepository
{
    protected static $order_by_choices = array(
        3  => 'r.id',
        25 => 'r.name', // default

        11 => 'r.created',
        12 => 'r.updated'

        // default
    );

    public function findQueryFilter($constraint = array())
    {
        $this->qb = $this->createQueryBuilder('r')->select('r');

        $this->checkConstraintOrderBy($constraint);
        $this->checkConstraintOrganization($constraint);

        return $this->qb->getQuery();
    }

    protected function checkConstraintOrganization($constraint = array())
    {
        if (isset($constraint['name'])) {
            $this->qb
                ->andWhere('r.name LIKE :name')
                ->setParameter('name', $constraint['name']);
        }

        if (isset($constraint['update_st'])) {
            $range_start = new \DateTime($constraint['update_st']);
            $this->qb
                ->andWhere('r.updated >= :update_st')
                ->setParameter('update_st', $range_start);
        }

        if (isset($constraint['update_nd'])) {
            $range_end = new \DateTime($constraint['update_nd']);
            $this->qb
                ->andWhere('r.updated <= :update_nd')
                ->setParameter('update_nd', $range_end);
        }
    }

    public function findParent($oid)
    {
        $qb = $this->createQueryBuilder('r')
            ->select('r')
            ->leftJoin('r.children', 'o')
            ->where('o.id = :oid')
            ->setParameter('oid', $oid);

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findBranches($oid)
    {
        $qb = $this->createQueryBuilder('r')
            ->select('r')
            ->leftJoin('r.parent', 'o')
            ->where('o.id = :oid')
            ->setParameter('oid', $oid);

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findQueryNameLike($name = null)
    {
        $qb = $this->createQueryBuilder('r');
        $qb->orderBy('r.name');

        if (!empty($name)) {
            $qb ->andWhere('r.name LIKE :name')
                ->setParameter('name', $name);
        }

        return $qb->getQuery();
    }

    public function getFirstId()
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('min(r.id) as id');

        $query = $queryBuilder->getQuery();
        $row = $query->getSingleResult();

        return $row['id'];
    }
}

