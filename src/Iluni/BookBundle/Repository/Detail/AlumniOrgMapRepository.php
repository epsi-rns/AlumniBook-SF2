<?php

namespace Iluni\BookBundle\Repository\Detail;

use Iluni\BookBundle\Repository\CommonConstraintRepository;

/**
 * AOMapRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AlumniOrgMapRepository extends CommonConstraintRepository
{
    protected static $order_by_choices = array(
        4  => 'r.id',
        21 => 'a.name, o.name',
        23 => 'o.name, a.name',
        101 => 'ac.community, a.name',
        102 => 'ac.department, ac.program, ac.classYear, a.name',
        103 => 'ac.faculty, ac.department, ac.program, ac.classYear, a.name',
        104 => 'ac.program, ac.department, ac.classYear, a.name',
        105 => 'ac.classYear, ac.department, a.name'    // default
    );

    public function findAlumniQueryFilter($constraint = array())
    {
        $this->qb = $this->createQueryBuilder('r')
            ->select('r, a, o, jt, ac')
            ->leftJoin('r.alumni', 'a')
            ->leftJoin('r.organization', 'o')
            ->leftJoin('r.jobType', 'jt')
            ->leftJoin('a.acommunities', 'ac');

        $this->checkConstraintOrderBy($constraint);
        $this->checkConstraintJobType($constraint);
        $this->checkConstraintCommunity($constraint);

        $query = $this->qb->getQuery();
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        return $this->qb->getQuery();
    }

    public function findOrgQueryFilter($constraint = array())
    {
        $this->qb = $this->createQueryBuilder('r')
            ->select('r, a, o, jp, ac')
            ->leftJoin('r.alumni', 'a')
            ->leftJoin('r.organization', 'o')
            ->leftJoin('r.jobPosition', 'jp')
            ->leftJoin('a.acommunities', 'ac');

        extract($constraint);

        $this->checkConstraintOrderBy($constraint);
        $this->checkConstraintJobPosition($constraint);
        $this->checkConstraintCommunity($constraint);

        $query = $this->qb->getQuery();
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        return $this->qb->getQuery();
    }

    protected function checkConstraintJobType($constraint = array())
    {
        if (isset($constraint['jobType'])) {
            $this->qb
                ->where('jt.id = :job_type_id')
                ->setParameter('job_type_id', $constraint['jobType']);
        }
    }

    protected function checkConstraintJobPosition($constraint = array())
    {
        if (isset($constraint['jobPosition'])) {
            $this->qb
                ->where('jp.id = :job_position_id')
                ->setParameter('job_position_id', $constraint['jobPosition']);
        }
    }


    public function findAlumniList($aid)
    {
        $qb = $this->createQueryBuilder('m')
            ->select('m, a, jt, jp')
            ->leftJoin('m.alumni', 'a')
            ->leftJoin('m.jobType', 'jt')
            ->leftJoin('m.jobPosition', 'jp')
            ->where('m.alumni = :aid')
            ->setParameter('aid', $aid);

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function findOrgList($oid)
    {
        $qb = $this->createQueryBuilder('m')
            ->select('m, o, jt, jp')
            ->leftJoin('m.organization', 'o')
            ->leftJoin('m.jobType', 'jt')
            ->leftJoin('m.jobPosition', 'jp')
            ->where('m.organization = :oid')
            ->setParameter('oid', $oid);

        $query = $qb->getQuery();
        return $query->getResult();
    }


    public function getFirstId()
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('min(r.id) as id');

        $query = $queryBuilder->getQuery();
        $row = $query->getSingleResult();

        return $row['id'];
    }
}

