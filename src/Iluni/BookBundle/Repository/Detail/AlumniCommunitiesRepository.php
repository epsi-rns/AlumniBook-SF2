<?php

namespace Iluni\BookBundle\Repository\Detail;

use Iluni\BookBundle\Repository\CommonConstraintRepository;

/**
 * ACommunitiesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AlumniCommunitiesRepository extends CommonConstraintRepository
{
    protected static $order_by_choices = array(
        1  => 'ac.id',
        21 => 'a.name',
        81 => 'ac.community, a.name',
        82 => 'ac.department, ac.program, ac.classYear, a.name',
        83 => 'ac.faculty, ac.department, ac.program, ac.classYear, a.name',
        84 => 'ac.program, ac.department, ac.classYear, a.name',
        85 => 'ac.classYear, ac.department, a.name' // default
    );

    public function findQueryFilter($constraint = array())
    {
        $this->qb = $this->createQueryBuilder('ac')
            ->select('ac, a, c')
            ->leftJoin('ac.alumni', 'a')
            ->leftJoin('ac.community', 'c');

        $this->checkConstraintOrderBy($constraint);
        $this->checkConstraintCommunity($constraint);

        return $this->qb->getQuery();
    }

    public function findList($aid)
    {
        $qb = $this->createQueryBuilder('r')
            ->select('r, c')
            ->leftJoin('r.alumni', 'a')
            ->leftJoin('r.community', 'c')
            ->leftJoin('c.faculty', 'f')
            ->leftJoin('c.department', 'd')
            ->leftJoin('c.program', 'p')
            ->where('a.id = :aid')
            ->setParameter('aid', $aid);

        $query = $qb->getQuery();
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
        return $query->getResult();
    }

    public function findSummary($pid, $fid, $did)
    {
        $qb = $this->createQueryBuilder('r')
            ->select('r, count(r) as total')
            ->groupBy('r.classYear')
            ->orderBy('r.classYear')
            ->where('r.classYear is not null');

        if (!empty($pid)) {
            $qb->andWhere('r.program = :pid')->setParameter('pid', $pid);
        }

        if (!empty($fid)) {
            $qb->andWhere('r.faculty = :fid')->setParameter('fid', $fid);
        }

        if (!empty($did)) {
            $qb->andWhere('r.department = :did')->setParameter('did', $did);
        }

        $pairs = array();
        $entities = $qb->getQuery()->getResult();

        // transform rows to pairs[year] = total
        foreach ($entities as $entity) {
            $pairs[ $entity[0]->getClassYear() ] = $entity['total'];
        }

        return $pairs;
    }
}

