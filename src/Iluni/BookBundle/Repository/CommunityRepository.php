<?php

namespace Iluni\BookBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CommunityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author E.R. Nurwijayadi <epsi.rns@gmail.com>
 */
class CommunityRepository extends EntityRepository
{
    protected static $order_by_choices = array(
        1  => 'r.id',
        10 => 'total DESC',
        91 => 'ac.community',
        92 => 'd.id, p.id',
        93 => 'f.id, d.id, p.id',
        94 => 'p.id, d.id'  // default
    );

    public function findQueryFilter($constraint = array())
    {
        $this->qb = $this->createQueryBuilder('r')
            ->select('r, f, p, d, count(ac) as total')
            ->leftJoin('r.faculty', 'f')
            ->leftJoin('r.department', 'd')
            ->leftJoin('r.program', 'p')
            ->leftJoin('r.acommunities', 'ac')
            ->groupBy('r.id');

        $this->checkConstraintOrderBy($constraint);

        $query = $this->qb->getQuery();
        $query->setHint(
            \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER,
            'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );

        return $this->qb->getQuery();
    }

    protected function checkConstraintOrderBy($constraint = array())
    {
        if (isset($constraint['orderBy'])) {
            $orderBy = $constraint['orderBy'];
            $orderByExist = array_key_exists($orderBy, self::$order_by_choices);

            if ($orderByExist) {
                $statement = self::$order_by_choices[$orderBy];

                // need to attach 'desc' in query
                // not using ->orderBy($statement);
                $this->qb->add('orderBy', $statement);
            }
        }

        if (isset($constraint['program'])) {
            $this->qb
                ->andWhere('p.id = :program_id')
                ->setParameter('program_id', $constraint['program']);
        }

        if (isset($constraint['department'])) {
            $this->qb
                ->andWhere('d.id = :department_id')
                ->setParameter('department_id', $constraint['department']);
        }

        if (isset($constraint['faculty'])) {
            $this->qb
                ->andWhere('f.id = :faculty_id')
                ->setParameter('faculty_id', $constraint['faculty']);
        }
    }

    public function findQueryNameLike($name = null)
    {
        $qb = $this->createQueryBuilder('r');
        $qb->orderBy('r.name');

        if (!empty($name)) {
            $qb ->andWhere('r.name LIKE :name')
                ->setParameter('name', $name);
        }

        return $qb->getQuery();
    }

    public function getFirstId()
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('min(r.id) as id');

        $query = $queryBuilder->getQuery();
        $row = $query->getSingleResult();

        return $row['id'];
    }
}

