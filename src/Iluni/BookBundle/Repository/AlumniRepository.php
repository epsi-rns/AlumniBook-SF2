<?php

namespace Iluni\BookBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;

use Iluni\BookBundle\Repository\CommonConstraintRepository;

/**
 * AlumniRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author E.R. Nurwijayadi <epsi.rns@gmail.com>
 */
class AlumniRepository extends CommonConstraintRepository
{
    protected static $order_by_choices = array(
        1  => 'r.id',   // default
        24 => 'r.name',
        28 => 'r.name',

        11 => 'r.created',
        12 => 'r.updated',


        73  => 'r.birthdate',

        // 74..77: Need native query
        74  => 'a_day, r.name',
        75  => 'a_month, a_day, r.name',
        76  => 'a_year, a_month, a_day, r.name',
        77  => 'a_weekday, a_month, a_day, r.name',

        111 => 'ac.community, r.name',
        112 => 'ac.department, ac.program, ac.classYear, r.name',
        113 => 'ac.faculty, ac.department, ac.program, ac.classYear, r.name',
        114 => 'ac.program, ac.department, ac.classYear, r.name',
        115 => 'ac.classYear, ac.department, r.name'    // default
    );

    public function findQueryFilter($constraint = array())
    {
        $this->qb = $this->createQueryBuilder('r')
            ->select('r, ac, c')
            ->leftJoin('r.acommunities', 'ac')
            ->leftJoin('ac.community', 'c');

        $this->checkConstraintOrderBy($constraint);
        $this->checkConstraintAlumni($constraint);
        $this->checkConstraintCommunity($constraint);

        return $this->qb->getQuery();
    }

    protected function checkConstraintAlumni($constraint = array())
    {
        if (isset($constraint['name'])) {
            $this->qb
                ->andWhere('r.name LIKE :name')
                ->setParameter('name', $constraint['name']);
        }

        if (isset($constraint['update_st'])) {
            $range_start = new \DateTime($constraint['update_st']);
            $this->qb
                ->andWhere('r.updated >= :update_st')
                ->setParameter('update_st', $range_start);
        }

        if (isset($constraint['update_nd'])) {
            $range_end = new \DateTime($constraint['update_nd']);
            $this->qb
                ->andWhere('r.updated <= :update_nd')
                ->setParameter('update_nd', $range_end);
        }
    }

    private function addCustomDependency()
    {
        // http://www.simukti.net/blog/2012/04/05/how-to-select-year-month-day-in-doctrine2/

        $emConfig = $this->getEntityManager()->getConfiguration();
        $dqlf_path = 'Iluni\BookBundle\Library\Doctrine\Mysql';

        $emConfig->addCustomDatetimeFunction('WEEKDAY', $dqlf_path.'\Weekday');
        $emConfig->addCustomDatetimeFunction('YEAR', $dqlf_path.'\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', $dqlf_path.'\Month');
        $emConfig->addCustomDatetimeFunction('DAY', $dqlf_path.'\Day'); //
    }

    public function findQueryBirthdayFilter($constraint = array())
    {
        // Warning: mySQL specific
        $this->addCustomDependency();

        $this->qb = $this->createQueryBuilder('r')
            ->select('r, ac, r.id, '
                .'WEEKDAY(r.birthdate) as a_weekday, '
                .'DAY(r.birthdate) as a_day, '  // Day of Month
                .'MONTH(r.birthdate) as a_month, '
                .'YEAR(r.birthdate) as a_year')
            ->leftJoin('r.acommunities', 'ac')
            //->leftJoin('ac.community', 'c');
            ->where('r.birthdate is not null');

        $this->checkConstraintOrderBy($constraint);
        $this->checkConstraintCommunity($constraint);

        // Debugging purpose.
        $dql = $this->qb->getDql();
        $em = $this->getEntityManager();
        $query = $em->createQuery($dql);

        return $query;
    }

    public function findQueryNameLike($name = null)
    {
        $qb = $this->createQueryBuilder('r');
        $qb->orderBy('r.name');

        if (!empty($name)) {
            $qb ->andWhere('r.name LIKE :name')
                ->setParameter('name', $name);
        }

        return $qb->getQuery();
    }

    public function findForAtom()
    {
        $offset = 0;
        $limit = 10;

        $qb = $this->createQueryBuilder('r')
            ->select('r, ac')
            ->leftJoin('r.acommunities', 'ac')
            ->orderBy('r.updated', 'DESC')
            ->where('r.updated <= :now')
            ->setParameter('now', new \DateTime)
            ->setFirstResult($offset)
            ->setMaxResults($limit);

        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getFirstId()
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('min(r.id) as id');

        $query = $queryBuilder->getQuery();
        $row = $query->getSingleResult();

        return $row['id'];
    }

    public function getLastUpdate()
    {
        $queryBuilder = $this->createQueryBuilder('r')
            ->select('max(r.updated) as last_update');

        $query = $queryBuilder->getQuery();
        $row = $query->getSingleResult();

        return $row['last_update'];
    }

    public function getLastUpdateForCover($translator)
    {
        $last_update = $this->getLastUpdate();
        $updated = new \DateTime(trim($last_update));
        $all = '%\s, j %\s Y, H:i:s';

        $dayweek = $translator
            ->trans($updated->format('l'), array(), 'calendar');
        $month   = $translator
            ->trans($updated->format('F'), array(), 'calendar');
        $format    = $translator
            ->trans($updated->format($all), array(), 'calendar');

        $final = sprintf($format, $dayweek, $month);


        return $final;
    }
}

